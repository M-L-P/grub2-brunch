###############################################################################
#                               [grubfm.cfg]
#                          to select an img file
###############################################################################
theme_vtoyfm
#==============================================================================
#####----{functions}----
#------------------------------------------------------------------------------
function grubfm_init {
	insmod blocklist
	insmod getkey
	insmod probe
	insmod regexp
}
#------------------------------------------------------------------------------
function enum_device {
	menuentry "${MENU_BACK}" --class "echo/back" --hotkey "esc" {
		if [ "chrome" != "${SELECTED}" ] -a [ "brunch" != "${SELECTED}" ]; then
			set SELECTED=grubfm
			configfile ${SET}/2.settings.lst
		else
			clear_menu
			normal
		fi
	}
	for device in (*); do
		if test -d "${device}"; then
			probe --set=fs -f -q "${device}";
			probe --set=label -l -q "${device}";
			if regexp 'loop' "${device}"; then
				continue;
			elif test "${device}" = "(memdisk)" -o "${device}" = "(proc)"; then
				continue;
			fi;
			menuentry "${device} [$fs] $label" "${device}" --class "grubfm/hdd" {
				grubfm_main "${2}";
			}
			unset label;
			unset fs;
		fi;
	done;
}
#------------------------------------------------------------------------------
function enum_file {
	for item in ${grub_path}/*; do
		regexp --set=1:name '.*/(.*)$' "${item}";
		if test -d "${item}"; then
			echo "[DBG] ADD DIR ${name}";
			menuentry "[${name}]" "${item}" --class "grubfm/dir" {
				grubfm_main "${2}";
			}
		fi;
	done;
	for item in ${grub_path}/*; do
		regexp --set=1:name '.*/(.*)$' "${item}";
		regexp --set=1:name_ext '^.*\.(.*$)' "${item}";
		if test -f "${item}"; then
			echo "[DBG] ADD FILE ${name}";
			if regexp '^[iI][mM][gG]$' "${name_ext}"; then
				set icon=img
			elif regexp '^[tT][xX][tT]$' "${name_ext}"; then
				set icon=txt
			else
				set icon=file
			fi
			menuentry "${name}" "${item}" --class "grubfm/${icon}" {
				grubfm_open "${2}";
			}
		fi;
	done;
}
#------------------------------------------------------------------------------
# grubfm_main PATH
function grubfm_main {
	echo "[DBG] grubfm_main ${1}";
	clear_menu;
	if [ -z "${1}" ]; then
		enum_device;
	else
		export grub_path="${1}";
		set default=1;
		menuentry "${grub_path}/.." --class "grubfm/go-previous" {
			if ! regexp --set=1:grub_path '(^.*)/.*$' "${grub_path}"; then
				export grub_path="";
			fi
			export grub_path;
			grubfm_main "${grub_path}";
		}
		enum_file;
	fi;
}
#------------------------------------------------------------------------------
function add_back_menu {
	set default=1;
	menuentry "${MENU_BACK}" --class "grubfm/go-previous" {
		grubfm_main "${grub_path}";
	}
}
#------------------------------------------------------------------------------
# grubfm_open FILE
function grubfm_open {
	echo "[DBG] grubfm_open ${1}";
	unset name;
	unset name_ext;
	export grub_file="${1}";
	regexp --set=1:name '.*/(.*)$' "${grub_file}";
	regexp --set=1:name_ext '^.*\.(.*$)' "${grub_file}";
# File type
	# txt
	if regexp '^[tT][xX][tT]$' "${name_ext}"; then
		clear_menu;
		add_back_menu;
		menuentry "${SUBMENU_TXT}" --class "grubfm/txt" {
			export FILE_TXT=${grub_file} NAME_TXT=\{.img.grub.txt\}
			ini_get --set=img_path ${FILE_TXT} img_path
			ini_get --set=img_uuid ${FILE_TXT} img_uuid
			save_env FILE_TXT NAME_TXT img_path img_uuid
			unset SELECTED
			clear_menu
			normal
		}
	# img
	elif regexp '^[iI][mM][gG]$' "${name_ext}"; then
		clear_menu;
		add_back_menu;
		menuentry "${SUBMENU_IMG}" --class "grubfm/img" {
			export FILE_IMG=${grub_file} NAME_IMG=\{.img\}
			save_env FILE_IMG NAME_IMG
			unset SELECTED
			clear_menu
			normal
		}
	fi;
}
#==============================================================================
grubfm_init;
grubfm_main "${grub_path}";